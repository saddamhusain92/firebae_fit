{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user's profile information.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the UserProfile entity."
        },
        "name": {
          "type": "string",
          "description": "User's full name."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "photoURL": {
          "type": "string",
          "description": "URL of the user's profile photo.",
          "format": "uri"
        },
        "bio": {
          "type": "string",
          "description": "A short biography or description of the user."
        }
      },
      "required": [
        "id",
        "name",
        "email"
      ]
    },
    "Workout": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Workout",
      "type": "object",
      "description": "Represents a single workout session.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Workout entity."
        },
        "userProfileId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N Workout)"
        },
        "exerciseName": {
          "type": "string",
          "description": "Name of the exercise performed."
        },
        "sets": {
          "type": "number",
          "description": "Number of sets performed."
        },
        "reps": {
          "type": "number",
          "description": "Number of repetitions performed in each set."
        },
        "duration": {
          "type": "number",
          "description": "Duration of the workout in minutes."
        },
        "caloriesBurned": {
          "type": "number",
          "description": "Estimated number of calories burned during the workout."
        },
        "date": {
          "type": "string",
          "description": "Date and time when the workout was performed.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userProfileId",
        "exerciseName",
        "sets",
        "reps",
        "duration",
        "caloriesBurned",
        "date"
      ]
    },
    "Goal": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Goal",
      "type": "object",
      "description": "Represents a fitness goal set by the user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Goal entity."
        },
        "userProfileId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N Goal)"
        },
        "goalType": {
          "type": "string",
          "description": "Type of the fitness goal (e.g., weight loss, muscle gain, steps target)."
        },
        "targetValue": {
          "type": "number",
          "description": "The target value for the goal."
        },
        "currentValue": {
          "type": "number",
          "description": "The current progress towards the goal."
        },
        "startDate": {
          "type": "string",
          "description": "The start date for the goal.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "The end date for the goal.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userProfileId",
        "goalType",
        "targetValue",
        "currentValue",
        "startDate",
        "endDate"
      ]
    },
    "ExerciseSuggestion": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ExerciseSuggestion",
      "type": "object",
      "description": "Represents a personalized exercise suggestion generated by the AI.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ExerciseSuggestion entity."
        },
        "userProfileId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N ExerciseSuggestion)"
        },
        "exerciseName": {
          "type": "string",
          "description": "Name of the suggested exercise."
        },
        "reason": {
          "type": "string",
          "description": "Reasoning behind the exercise suggestion (based on user data)."
        },
        "suggestedSets": {
          "type": "number",
          "description": "Suggested number of sets."
        },
        "suggestedReps": {
          "type": "number",
          "description": "Suggested number of repetitions."
        },
        "date": {
          "type": "string",
          "description": "Date and time when the workout was performed.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userProfileId",
        "exerciseName",
        "reason",
        "suggestedSets",
        "suggestedReps",
        "date"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}/userProfile",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information. Path-based ownership ensures only the user can access their profile. Includes denormalized 'userId' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/workouts/{workoutId}",
        "definition": {
          "entityName": "Workout",
          "schema": {
            "$ref": "#/backend/entities/Workout"
          },
          "description": "Stores workout data for a specific user. Path-based ownership ensures only the user can access their workouts. Includes denormalized 'userProfileId' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "workoutId",
              "description": "The unique identifier of the workout."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/goals/{goalId}",
        "definition": {
          "entityName": "Goal",
          "schema": {
            "$ref": "#/backend/entities/Goal"
          },
          "description": "Stores goal data for a specific user. Path-based ownership ensures only the user can access their goals. Includes denormalized 'userProfileId' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "goalId",
              "description": "The unique identifier of the goal."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/exerciseSuggestions/{exerciseSuggestionId}",
        "definition": {
          "entityName": "ExerciseSuggestion",
          "schema": {
            "$ref": "#/backend/entities/ExerciseSuggestion"
          },
          "description": "Stores exercise suggestions for a specific user. Path-based ownership ensures only the user can access their exercise suggestions. Includes denormalized 'userProfileId' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "exerciseSuggestionId",
              "description": "The unique identifier of the exercise suggestion."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure Authorization Independence, support QAPs (Queries are not Filters), and maintain data clarity.  User data is segregated under `/users/{userId}` for private access.  Workouts, Goals, and ExerciseSuggestions are also located under `/users/{userId}` establishing clear ownership. This eliminates the need for `get()` calls in security rules, enabling atomic operations and simplified debugging. The structure inherently supports secure `list` operations (QAPs) because each collection is homogeneous in its security posture, requiring no filtering of results based on user roles or permissions. No global roles were requested."
  }
}